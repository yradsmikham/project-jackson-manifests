---
apiVersion: v1
data:
  validatingwebhookconfiguration.yaml: |-
    apiVersion: admissionregistration.k8s.io/v1beta1
    kind: ValidatingWebhookConfiguration
    metadata:
      name: istio-galley
      namespace: istio-system
      labels:
        app: istio-galley
        chart: galley-1.0.6
        release: istio
        heritage: Tiller
    webhooks:
      - name: pilot.validation.istio.io
        clientConfig:
          service:
            name: istio-galley
            namespace: istio-system
            path: "/admitpilot"
          caBundle: ""
        rules:
          - operations:
            - CREATE
            - UPDATE
            apiGroups:
            - config.istio.io
            apiVersions:
            - v1alpha2
            resources:
            - httpapispecs
            - httpapispecbindings
            - quotaspecs
            - quotaspecbindings
          - operations:
            - CREATE
            - UPDATE
            apiGroups:
            - rbac.istio.io
            apiVersions:
            - "*"
            resources:
            - "*"
          - operations:
            - CREATE
            - UPDATE
            apiGroups:
            - authentication.istio.io
            apiVersions:
            - "*"
            resources:
            - "*"
          - operations:
            - CREATE
            - UPDATE
            apiGroups:
            - networking.istio.io
            apiVersions:
            - "*"
            resources:
            - destinationrules
            - envoyfilters
            - gateways
            - serviceentries
            - virtualservices
        failurePolicy: Fail
      - name: mixer.validation.istio.io
        clientConfig:
          service:
            name: istio-galley
            namespace: istio-system
            path: "/admitmixer"
          caBundle: ""
        rules:
          - operations:
            - CREATE
            - UPDATE
            apiGroups:
            - config.istio.io
            apiVersions:
            - v1alpha2
            resources:
            - rules
            - attributemanifests
            - circonuses
            - deniers
            - fluentds
            - kubernetesenvs
            - listcheckers
            - memquotas
            - noops
            - opas
            - prometheuses
            - rbacs
            - servicecontrols
            - solarwindses
            - stackdrivers
            - statsds
            - stdios
            - apikeys
            - authorizations
            - checknothings
            # - kuberneteses
            - listentries
            - logentries
            - metrics
            - quotas
            - reportnothings
            - servicecontrolreports
            - tracespans
        failurePolicy: Fail
kind: ConfigMap
metadata:
  labels:
    app: istio-galley
    chart: galley-1.0.6
    heritage: Tiller
    istio: mixer
    release: istio
  name: istio-galley-configuration
  namespace: istio-system

---
apiVersion: v1
data:
  config.yaml: |
    server:
      port: 20001
    external_services:
      jaeger:
        url: http://jaeger-query.jaeger.svc.cluster.local
      grafana:
        url: http://grafana.grafana.svc.cluster.local
kind: ConfigMap
metadata:
  labels:
    app: kiali
  name: kiali
  namespace: istio-system

---
apiVersion: v1
data:
  mapping.conf: ""
kind: ConfigMap
metadata:
  labels:
    app: istio-statsd-prom-bridge
    chart: mixer-1.0.6
    heritage: Tiller
    istio: mixer
    release: istio
  name: istio-statsd-prom-bridge
  namespace: istio-system

---
apiVersion: v1
data:
  custom-resources.yaml: |-
    # Authentication policy to enable permissive mode for all services (that have sidecar) in the mesh.
    apiVersion: "authentication.istio.io/v1alpha1"
    kind: "MeshPolicy"
    metadata:
      name: "default"
      labels:
        app: istio-security
        chart: security-1.0.6
        release: istio
        heritage: Tiller
    spec:
      peers:
      - mtls:
          mode: PERMISSIVE
  run.sh: |-
    #!/bin/sh

    set -x

    if [ "$#" -ne "1" ]; then
        echo "first argument should be path to custom resource yaml"
        exit 1
    fi

    pathToResourceYAML=${1}

    /kubectl get validatingwebhookconfiguration istio-galley 2>/dev/null
    if [ "$?" -eq 0 ]; then
        echo "istio-galley validatingwebhookconfiguration found - waiting for istio-galley deployment to be ready"
        while true; do
            /kubectl -n istio-system get deployment istio-galley 2>/dev/null
            if [ "$?" -eq 0 ]; then
                break
            fi
            sleep 1
        done
        /kubectl -n istio-system rollout status deployment istio-galley
        if [ "$?" -ne 0 ]; then
            echo "istio-galley deployment rollout status check failed"
            exit 1
        fi
        echo "istio-galley deployment ready for configuration validation"
    fi
    sleep 5
    /kubectl apply -f ${pathToResourceYAML}
kind: ConfigMap
metadata:
  labels:
    app: istio-security
    chart: security-1.0.6
    heritage: Tiller
    istio: security
    release: istio
  name: istio-security-custom-resources
  namespace: istio-system

---
apiVersion: v1
data:
  mesh: "# Set the following variable to true to disable policy checks by the Mixer.\n#
    Note that metrics will still be reported to the Mixer.\ndisablePolicyChecks: false\n\n#
    Set enableTracing to false to disable request tracing.\nenableTracing: true\n\n#
    Set accessLogFile to empty string to disable access log.\naccessLogFile: \"/dev/stdout\"\n#\n#
    Deprecated: mixer is using EDS\nmixerCheckServer: istio-policy.istio-system.svc.cluster.local:9091\nmixerReportServer:
    istio-telemetry.istio-system.svc.cluster.local:9091\n\n# policyCheckFailOpen allows
    traffic in cases when the mixer policy service cannot be reached.\n# Default is
    false which means the traffic is denied when the client is unable to connect to
    Mixer.\npolicyCheckFailOpen: false\n\n# Unix Domain Socket through which envoy
    communicates with NodeAgent SDS to get\n# key/cert for mTLS. Use secret-mount
    files instead of SDS if set to empty. \nsdsUdsPath: \"\"\n\n# How frequently should
    Envoy fetch key/cert from NodeAgent.\nsdsRefreshDelay: 15s\n\n#\ndefaultConfig:\n
    \ #\n  # TCP connection timeout between Envoy & the application, and between Envoys.\n
    \ connectTimeout: 10s\n  #\n  ### ADVANCED SETTINGS #############\n  # Where should
    envoy's configuration be stored in the istio-proxy container\n  configPath: \"/etc/istio/proxy\"\n
    \ binaryPath: \"/usr/local/bin/envoy\"\n  # The pseudo service name used for Envoy.\n
    \ serviceCluster: istio-proxy\n  # These settings that determine how long an old
    Envoy\n  # process should be kept alive after an occasional reload.\n  drainDuration:
    45s\n  parentShutdownDuration: 1m0s\n  #\n  # The mode used to redirect inbound
    connections to Envoy. This setting\n  # has no effect on outbound traffic: iptables
    REDIRECT is always used for\n  # outbound connections.\n  # If \"REDIRECT\", use
    iptables REDIRECT to NAT and redirect to Envoy.\n  # The \"REDIRECT\" mode loses
    source addresses during redirection.\n  # If \"TPROXY\", use iptables TPROXY to
    redirect to Envoy.\n  # The \"TPROXY\" mode preserves both the source and destination
    IP\n  # addresses and ports, so that they can be used for advanced filtering\n
    \ # and manipulation.\n  # The \"TPROXY\" mode also configures the sidecar to
    run with the\n  # CAP_NET_ADMIN capability, which is required to use TPROXY.\n
    \ #interceptionMode: REDIRECT\n  #\n  # Port where Envoy listens (on local host)
    for admin commands\n  # You can exec into the istio-proxy container in a pod and\n
    \ # curl the admin port (curl http://localhost:15000/) to obtain\n  # diagnostic
    information from Envoy. See\n  # https://lyft.github.io/envoy/docs/operations/admin.html\n
    \ # for more details\n  proxyAdminPort: 15000\n  #\n  # Set concurrency to a specific
    number to control the number of Proxy worker threads.\n  # If set to 0 (default),
    then start worker thread for each CPU thread/core.\n  concurrency: 0\n  #\n  #
    Zipkin trace collector\n  zipkinAddress: zipkin.istio-system:9411\n  #\n  # Mutual
    TLS authentication between sidecars and istio control plane.\n  controlPlaneAuthPolicy:
    NONE\n  #\n  # Address where istio Pilot service is running\n  discoveryAddress:
    istio-pilot.istio-system:15007"
kind: ConfigMap
metadata:
  labels:
    app: istio
    chart: istio-1.0.6
    heritage: Tiller
    release: istio
  name: istio
  namespace: istio-system

---
apiVersion: v1
data:
  config: "policy: enabled\ntemplate: |-\n  initContainers:\n  - name: istio-init\n
    \   image: \"docker.io/istio/proxy_init:1.0.6\"\n    args:\n    - \"-p\"\n    -
    [[ .MeshConfig.ProxyListenPort ]]\n    - \"-u\"\n    - 1337\n    - \"-m\"\n    -
    [[ annotation .ObjectMeta `sidecar.istio.io/interceptionMode` .ProxyConfig.InterceptionMode
    ]]\n    - \"-i\"\n    - \"[[ annotation .ObjectMeta `traffic.sidecar.istio.io/includeOutboundIPRanges`
    \ \"0.0.0.0\"  ]]\"\n    - \"-x\"\n    - \"[[ annotation .ObjectMeta `traffic.sidecar.istio.io/excludeOutboundIPRanges`
    \ \"\"  ]]\"\n    - \"-b\"\n    - \"[[ annotation .ObjectMeta `traffic.sidecar.istio.io/includeInboundPorts`
    (includeInboundPorts .Spec.Containers) ]]\"\n    - \"-d\"\n    - \"[[ excludeInboundPort
    (annotation .ObjectMeta `status.sidecar.istio.io/port`  0 ) (annotation .ObjectMeta
    `traffic.sidecar.istio.io/excludeInboundPorts`  \"\" ) ]]\"\n    imagePullPolicy:
    IfNotPresent\n    securityContext:\n      capabilities:\n        add:\n        -
    NET_ADMIN\n      privileged: true\n    restartPolicy: Always\n  containers:\n
    \ - name: istio-proxy\n    image: [[ annotation .ObjectMeta `sidecar.istio.io/proxyImage`
    \ \"docker.io/istio/proxyv2:1.0.6\"  ]]\n\n    ports:\n    - containerPort: 15090\n
    \     protocol: TCP\n      name: http-envoy-prom\n\n    args:\n    - proxy\n    -
    sidecar\n    - --configPath\n    - [[ .ProxyConfig.ConfigPath ]]\n    - --binaryPath\n
    \   - [[ .ProxyConfig.BinaryPath ]]\n    - --serviceCluster\n    [[ if ne \"\"
    (index .ObjectMeta.Labels \"app\") -]]\n    - [[ index .ObjectMeta.Labels \"app\"
    ]]\n    [[ else -]]\n    - \"istio-proxy\"\n    [[ end -]]\n    - --drainDuration\n
    \   - [[ formatDuration .ProxyConfig.DrainDuration ]]\n    - --parentShutdownDuration\n
    \   - [[ formatDuration .ProxyConfig.ParentShutdownDuration ]]\n    - --discoveryAddress\n
    \   - [[ annotation .ObjectMeta `sidecar.istio.io/discoveryAddress` .ProxyConfig.DiscoveryAddress
    ]]\n    - --discoveryRefreshDelay\n    - [[ formatDuration .ProxyConfig.DiscoveryRefreshDelay
    ]]\n    - --zipkinAddress\n    - [[ .ProxyConfig.ZipkinAddress ]]\n    - --connectTimeout\n
    \   - [[ formatDuration .ProxyConfig.ConnectTimeout ]]\n    - --proxyAdminPort\n
    \   - [[ .ProxyConfig.ProxyAdminPort ]]\n    [[ if gt .ProxyConfig.Concurrency
    0 -]]\n    - --concurrency\n    - [[ .ProxyConfig.Concurrency ]]\n    [[ end -]]\n
    \   - --controlPlaneAuthPolicy\n    - [[ annotation .ObjectMeta `sidecar.istio.io/controlPlaneAuthPolicy`
    .ProxyConfig.ControlPlaneAuthPolicy ]]\n  [[- if (ne (annotation .ObjectMeta `status.sidecar.istio.io/port`
    \ 0 ) \"0\") ]]\n    - --statusPort\n    - [[ annotation .ObjectMeta `status.sidecar.istio.io/port`
    \ 0  ]]\n    - --applicationPorts\n    - \"[[ annotation .ObjectMeta `readiness.status.sidecar.istio.io/applicationPorts`
    (applicationPorts .Spec.Containers) ]]\"\n  [[- end ]]\n    env:\n    - name:
    POD_NAME\n      valueFrom:\n        fieldRef:\n          fieldPath: metadata.name\n
    \   - name: POD_NAMESPACE\n      valueFrom:\n        fieldRef:\n          fieldPath:
    metadata.namespace\n    - name: INSTANCE_IP\n      valueFrom:\n        fieldRef:\n
    \         fieldPath: status.podIP\n    - name: ISTIO_META_POD_NAME\n      valueFrom:\n
    \       fieldRef:\n          fieldPath: metadata.name\n    - name: ISTIO_META_INTERCEPTION_MODE\n
    \     value: [[ or (index .ObjectMeta.Annotations \"sidecar.istio.io/interceptionMode\")
    .ProxyConfig.InterceptionMode.String ]]\n    [[ if .ObjectMeta.Annotations ]]\n
    \   - name: ISTIO_METAJSON_ANNOTATIONS\n      value: |\n             [[ toJson
    .ObjectMeta.Annotations ]]\n    [[ end ]]\n    [[ if .ObjectMeta.Labels ]]\n    -
    name: ISTIO_METAJSON_LABELS\n      value: |\n             [[ toJson .ObjectMeta.Labels
    ]]\n    [[ end ]]\n    imagePullPolicy: IfNotPresent\n    [[ if (ne (annotation
    .ObjectMeta `status.sidecar.istio.io/port`  0 ) \"0\") ]]\n    readinessProbe:\n
    \     httpGet:\n        path: /healthz/ready\n        port: [[ annotation .ObjectMeta
    `status.sidecar.istio.io/port`  0  ]]\n      initialDelaySeconds: [[ annotation
    .ObjectMeta `readiness.status.sidecar.istio.io/initialDelaySeconds`  1  ]]\n      periodSeconds:
    [[ annotation .ObjectMeta `readiness.status.sidecar.istio.io/periodSeconds`  2
    \ ]]\n      failureThreshold: [[ annotation .ObjectMeta `readiness.status.sidecar.istio.io/failureThreshold`
    \ 30  ]]\n    [[ end -]]securityContext:\n      \n      readOnlyRootFilesystem:
    true\n      [[ if eq (annotation .ObjectMeta `sidecar.istio.io/interceptionMode`
    .ProxyConfig.InterceptionMode) \"TPROXY\" -]]\n      capabilities:\n        add:\n
    \       - NET_ADMIN\n      runAsGroup: 1337\n      [[ else -]]\n      runAsUser:
    1337\n      [[ end -]]\n    restartPolicy: Always\n    resources:\n      [[ if
    (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU`) -]]\n      requests:\n
    \       cpu: \"[[ index .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU` ]]\"\n
    \       memory: \"[[ index .ObjectMeta.Annotations `sidecar.istio.io/proxyMemory`
    ]]\"\n    [[ else -]]\n      requests:\n        cpu: 10m\n      \n    [[ end -]]\n
    \   volumeMounts:\n    - mountPath: /etc/istio/proxy\n      name: istio-envoy\n
    \   - mountPath: /etc/certs/\n      name: istio-certs\n      readOnly: true\n
    \ volumes:\n  - emptyDir:\n      medium: Memory\n    name: istio-envoy\n  - name:
    istio-certs\n    secret:\n      optional: true\n      [[ if eq .Spec.ServiceAccountName
    \"\" -]]\n      secretName: istio.default\n      [[ else -]]\n      secretName:
    [[ printf \"istio.%s\" .Spec.ServiceAccountName ]]\n      [[ end -]]"
kind: ConfigMap
metadata:
  labels:
    app: istio
    chart: istio-1.0.6
    heritage: Tiller
    istio: sidecar-injector
    release: istio
  name: istio-sidecar-injector
  namespace: istio-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: istio-galley
    chart: galley-1.0.6
    heritage: Tiller
    release: istio
  name: istio-galley-service-account
  namespace: istio-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: egressgateway
    chart: gateways-1.0.6
    heritage: Tiller
    release: istio
  name: istio-egressgateway-service-account
  namespace: istio-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ingressgateway
    chart: gateways-1.0.6
    heritage: Tiller
    release: istio
  name: istio-ingressgateway-service-account
  namespace: istio-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: kiali
    chart: kiali-1.0.6
    heritage: Tiller
    release: istio
  name: kiali-service-account
  namespace: istio-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: mixer
    chart: mixer-1.0.6
    heritage: Tiller
    release: istio
  name: istio-mixer-service-account
  namespace: istio-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: istio-pilot
    chart: pilot-1.0.6
    heritage: Tiller
    release: istio
  name: istio-pilot-service-account
  namespace: istio-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-delete-policy: hook-succeeded
    helm.sh/hook-weight: "1"
  labels:
    app: security
    chart: security-1.0.6
    heritage: Tiller
    release: istio
  name: istio-cleanup-secrets-service-account
  namespace: istio-system

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-delete-policy: hook-succeeded
    helm.sh/hook-weight: "1"
  labels:
    app: security
    chart: security-1.0.6
    heritage: Tiller
    release: istio
  name: istio-cleanup-secrets-istio-system
  namespace: istio-system
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - list
  - delete

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-delete-policy: hook-succeeded
    helm.sh/hook-weight: "2"
  labels:
    app: security
    chart: security-1.0.6
    heritage: Tiller
    release: istio
  name: istio-cleanup-secrets-istio-system
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-cleanup-secrets-istio-system
subjects:
- kind: ServiceAccount
  name: istio-cleanup-secrets-service-account
  namespace: istio-system

---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-delete-policy: hook-succeeded
    helm.sh/hook-weight: "3"
  labels:
    app: security
    chart: security-1.0.6
    heritage: Tiller
    release: istio
  name: istio-cleanup-secrets
  namespace: istio-system
spec:
  template:
    metadata:
      labels:
        app: security
        release: istio
      name: istio-cleanup-secrets
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          kubectl get secret --all-namespaces | grep "istio.io/key-and-cert" |  while read -r entry; do
            ns=$(echo $entry | awk '{print $1}');
            name=$(echo $entry | awk '{print $2}');
            kubectl delete secret $name -n $ns;
          done
        image: quay.io/coreos/hyperkube:v1.7.6_coreos.0
        name: hyperkube
      restartPolicy: OnFailure
      serviceAccountName: istio-cleanup-secrets-service-account

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: istio-security
    chart: security-1.0.6
    heritage: Tiller
    release: istio
  name: istio-security-post-install-account
  namespace: istio-system

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: istio-security
    chart: security-1.0.6
    heritage: Tiller
    release: istio
  name: istio-security-post-install-istio-system
  namespace: istio-system
rules:
- apiGroups:
  - authentication.istio.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - networking.istio.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - get
- apiGroups:
  - extensions
  resources:
  - deployments
  - replicasets
  verbs:
  - get
  - list
  - watch

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: istio-security
    chart: security-1.0.6
    heritage: Tiller
    release: istio
  name: istio-security-post-install-role-binding-istio-system
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-security-post-install-istio-system
subjects:
- kind: ServiceAccount
  name: istio-security-post-install-account
  namespace: istio-system

---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: hook-succeeded
  labels:
    app: istio-security
    chart: security-1.0.6
    heritage: Tiller
    release: istio
  name: istio-security-post-install
  namespace: istio-system
spec:
  template:
    metadata:
      labels:
        app: istio-security
        release: istio
      name: istio-security-post-install
    spec:
      containers:
      - command:
        - /bin/bash
        - /tmp/security/run.sh
        - /tmp/security/custom-resources.yaml
        image: quay.io/coreos/hyperkube:v1.7.6_coreos.0
        name: hyperkube
        volumeMounts:
        - mountPath: /tmp/security
          name: tmp-configmap-security
      restartPolicy: OnFailure
      serviceAccountName: istio-security-post-install-account
      volumes:
      - configMap:
          name: istio-security-custom-resources
        name: tmp-configmap-security

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: security
    chart: security-1.0.6
    heritage: Tiller
    release: istio
  name: istio-citadel-service-account
  namespace: istio-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: istio-sidecar-injector
    chart: sidecarInjectorWebhook-1.0.6
    heritage: Tiller
    release: istio
  name: istio-sidecar-injector-service-account
  namespace: istio-system

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: istio-pilot
  name: virtualservices.networking.istio.io
  namespace: istio-system
spec:
  group: networking.istio.io
  names:
    categories:
    - istio-io
    - networking-istio-io
    kind: VirtualService
    listKind: VirtualServiceList
    plural: virtualservices
    singular: virtualservice
  scope: Namespaced
  version: v1alpha3

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: istio-pilot
  name: destinationrules.networking.istio.io
  namespace: istio-system
spec:
  group: networking.istio.io
  names:
    categories:
    - istio-io
    - networking-istio-io
    kind: DestinationRule
    listKind: DestinationRuleList
    plural: destinationrules
    singular: destinationrule
  scope: Namespaced
  version: v1alpha3

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: istio-pilot
  name: serviceentries.networking.istio.io
  namespace: istio-system
spec:
  group: networking.istio.io
  names:
    categories:
    - istio-io
    - networking-istio-io
    kind: ServiceEntry
    listKind: ServiceEntryList
    plural: serviceentries
    singular: serviceentry
  scope: Namespaced
  version: v1alpha3

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
    helm.sh/hook-weight: "-5"
  labels:
    app: istio-pilot
  name: gateways.networking.istio.io
  namespace: istio-system
spec:
  group: networking.istio.io
  names:
    categories:
    - istio-io
    - networking-istio-io
    kind: Gateway
    plural: gateways
    singular: gateway
  scope: Namespaced
  version: v1alpha3

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: istio-pilot
  name: envoyfilters.networking.istio.io
  namespace: istio-system
spec:
  group: networking.istio.io
  names:
    categories:
    - istio-io
    - networking-istio-io
    kind: EnvoyFilter
    plural: envoyfilters
    singular: envoyfilter
  scope: Namespaced
  version: v1alpha3

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  name: httpapispecbindings.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - apim-istio-io
    kind: HTTPAPISpecBinding
    plural: httpapispecbindings
    singular: httpapispecbinding
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  name: httpapispecs.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - apim-istio-io
    kind: HTTPAPISpec
    plural: httpapispecs
    singular: httpapispec
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  name: quotaspecbindings.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - apim-istio-io
    kind: QuotaSpecBinding
    plural: quotaspecbindings
    singular: quotaspecbinding
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  name: quotaspecs.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - apim-istio-io
    kind: QuotaSpec
    plural: quotaspecs
    singular: quotaspec
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: core
    package: istio.io.mixer
  name: rules.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: rule
    plural: rules
    singular: rule
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: core
    package: istio.io.mixer
  name: attributemanifests.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: attributemanifest
    plural: attributemanifests
    singular: attributemanifest
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: bypass
  name: bypasses.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: bypass
    plural: bypasses
    singular: bypass
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: circonus
  name: circonuses.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: circonus
    plural: circonuses
    singular: circonus
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: denier
  name: deniers.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: denier
    plural: deniers
    singular: denier
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: fluentd
  name: fluentds.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: fluentd
    plural: fluentds
    singular: fluentd
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: kubernetesenv
  name: kubernetesenvs.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: kubernetesenv
    plural: kubernetesenvs
    singular: kubernetesenv
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: listchecker
  name: listcheckers.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: listchecker
    plural: listcheckers
    singular: listchecker
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: memquota
  name: memquotas.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: memquota
    plural: memquotas
    singular: memquota
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: noop
  name: noops.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: noop
    plural: noops
    singular: noop
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: opa
  name: opas.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: opa
    plural: opas
    singular: opa
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: prometheus
  name: prometheuses.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: prometheus
    plural: prometheuses
    singular: prometheus
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: rbac
  name: rbacs.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: rbac
    plural: rbacs
    singular: rbac
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    istio: mixer-adapter
    package: redisquota
  name: redisquotas.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    kind: redisquota
    plural: redisquotas
    singular: redisquota
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: servicecontrol
  name: servicecontrols.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: servicecontrol
    plural: servicecontrols
    singular: servicecontrol
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: signalfx
  name: signalfxs.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: signalfx
    plural: signalfxs
    singular: signalfx
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: solarwinds
  name: solarwindses.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: solarwinds
    plural: solarwindses
    singular: solarwinds
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: stackdriver
  name: stackdrivers.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: stackdriver
    plural: stackdrivers
    singular: stackdriver
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: statsd
  name: statsds.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: statsd
    plural: statsds
    singular: statsd
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: stdio
  name: stdios.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: stdio
    plural: stdios
    singular: stdio
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-instance
    package: apikey
  name: apikeys.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: apikey
    plural: apikeys
    singular: apikey
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-instance
    package: authorization
  name: authorizations.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: authorization
    plural: authorizations
    singular: authorization
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-instance
    package: checknothing
  name: checknothings.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: checknothing
    plural: checknothings
    singular: checknothing
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-instance
    package: adapter.template.kubernetes
  name: kuberneteses.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: kubernetes
    plural: kuberneteses
    singular: kubernetes
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-instance
    package: listentry
  name: listentries.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: listentry
    plural: listentries
    singular: listentry
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-instance
    package: logentry
  name: logentries.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: logentry
    plural: logentries
    singular: logentry
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-instance
    package: edge
  name: edges.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: edge
    plural: edges
    singular: edge
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-instance
    package: metric
  name: metrics.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: metric
    plural: metrics
    singular: metric
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-instance
    package: quota
  name: quotas.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: quota
    plural: quotas
    singular: quota
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-instance
    package: reportnothing
  name: reportnothings.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: reportnothing
    plural: reportnothings
    singular: reportnothing
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-instance
    package: servicecontrolreport
  name: servicecontrolreports.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: servicecontrolreport
    plural: servicecontrolreports
    singular: servicecontrolreport
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-instance
    package: tracespan
  name: tracespans.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: tracespan
    plural: tracespans
    singular: tracespan
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: rbac
    package: istio.io.mixer
  name: rbacconfigs.rbac.istio.io
  namespace: istio-system
spec:
  group: rbac.istio.io
  names:
    categories:
    - istio-io
    - rbac-istio-io
    kind: RbacConfig
    plural: rbacconfigs
    singular: rbacconfig
  scope: Namespaced
  version: v1alpha1

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: rbac
    package: istio.io.mixer
  name: serviceroles.rbac.istio.io
  namespace: istio-system
spec:
  group: rbac.istio.io
  names:
    categories:
    - istio-io
    - rbac-istio-io
    kind: ServiceRole
    plural: serviceroles
    singular: servicerole
  scope: Namespaced
  version: v1alpha1

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: rbac
    package: istio.io.mixer
  name: servicerolebindings.rbac.istio.io
  namespace: istio-system
spec:
  group: rbac.istio.io
  names:
    categories:
    - istio-io
    - rbac-istio-io
    kind: ServiceRoleBinding
    plural: servicerolebindings
    singular: servicerolebinding
  scope: Namespaced
  version: v1alpha1

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-adapter
    package: adapter
  name: adapters.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: adapter
    plural: adapters
    singular: adapter
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-instance
    package: instance
  name: instances.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: instance
    plural: instances
    singular: instance
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-template
    package: template
  name: templates.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: template
    plural: templates
    singular: template
  scope: Namespaced
  version: v1alpha2

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/hook: crd-install
  labels:
    app: mixer
    istio: mixer-handler
    package: handler
  name: handlers.config.istio.io
  namespace: istio-system
spec:
  group: config.istio.io
  names:
    categories:
    - istio-io
    - policy-istio-io
    kind: handler
    plural: handlers
    singular: handler
  scope: Namespaced
  version: v1alpha2

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: istio-galley
    chart: galley-1.0.6
    heritage: Tiller
    release: istio
  name: istio-galley-istio-system
  namespace: istio-system
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - '*'
- apiGroups:
  - config.istio.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - '*'
  resourceNames:
  - istio-galley
  resources:
  - deployments
  verbs:
  - get
- apiGroups:
  - '*'
  resourceNames:
  - istio-galley
  resources:
  - endpoints
  verbs:
  - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: gateways
    chart: gateways-1.0.6
    heritage: Tiller
    release: istio
  name: istio-egressgateway-istio-system
  namespace: istio-system
rules:
- apiGroups:
  - extensions
  resources:
  - thirdpartyresources
  - virtualservices
  - destinationrules
  - gateways
  verbs:
  - get
  - watch
  - list
  - update

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: gateways
    chart: gateways-1.0.6
    heritage: Tiller
    release: istio
  name: istio-ingressgateway-istio-system
  namespace: istio-system
rules:
- apiGroups:
  - extensions
  resources:
  - thirdpartyresources
  - virtualservices
  - destinationrules
  - gateways
  verbs:
  - get
  - watch
  - list
  - update

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: kiali
    version: master
  name: kiali
  namespace: istio-system
rules:
- apiGroups:
  - ""
  - apps
  - autoscaling
  - batch
  resources:
  - configmaps
  - cronjobs
  - deployments
  - endpoints
  - horizontalpodautoscalers
  - jobs
  - namespaces
  - nodes
  - pods
  - projects
  - services
  - statefulsets
  - replicasets
  - replicationcontrollers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - config.istio.io
  resources:
  - apikeys
  - authorizations
  - checknothings
  - circonuses
  - deniers
  - fluentds
  - handlers
  - kubernetesenvs
  - kuberneteses
  - listcheckers
  - listentries
  - logentries
  - memquotas
  - metrics
  - opas
  - prometheuses
  - quotas
  - quotaspecbindings
  - quotaspecs
  - rbacs
  - reportnothings
  - rules
  - servicecontrolreports
  - servicecontrols
  - solarwindses
  - stackdrivers
  - statsds
  - stdios
  verbs:
  - delete
  - get
  - list
  - patch
  - watch
- apiGroups:
  - networking.istio.io
  resources:
  - destinationrules
  - gateways
  - serviceentries
  - virtualservices
  verbs:
  - delete
  - get
  - list
  - patch
  - watch

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: mixer
    chart: mixer-1.0.6
    heritage: Tiller
    release: istio
  name: istio-mixer-istio-system
  namespace: istio-system
rules:
- apiGroups:
  - config.istio.io
  resources:
  - '*'
  verbs:
  - create
  - get
  - list
  - watch
  - patch
- apiGroups:
  - rbac.istio.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - pods
  - services
  - namespaces
  - secrets
  - replicationcontrollers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: istio-pilot
    chart: pilot-1.0.6
    heritage: Tiller
    release: istio
  name: istio-pilot-istio-system
  namespace: istio-system
rules:
- apiGroups:
  - config.istio.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - rbac.istio.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - networking.istio.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - authentication.istio.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
- apiGroups:
  - extensions
  resources:
  - thirdpartyresources
  - thirdpartyresources.extensions
  - ingresses
  - ingresses/status
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - get
  - list
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - endpoints
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - nodes
  - secrets
  verbs:
  - get
  - list
  - watch

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: security
    chart: security-1.0.6
    heritage: Tiller
    release: istio
  name: istio-citadel-istio-system
  namespace: istio-system
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
  - watch
  - list
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - watch
  - list

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: istio-sidecar-injector
    chart: sidecarInjectorWebhook-1.0.6
    heritage: Tiller
    release: istio
  name: istio-sidecar-injector-istio-system
  namespace: istio-system
rules:
- apiGroups:
  - '*'
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - get
  - list
  - watch
  - patch

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: istio-galley
    chart: galley-1.0.6
    heritage: Tiller
    release: istio
  name: istio-galley-admin-role-binding-istio-system
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-galley-istio-system
subjects:
- kind: ServiceAccount
  name: istio-galley-service-account
  namespace: istio-system

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: istio-egressgateway-istio-system
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-egressgateway-istio-system
subjects:
- kind: ServiceAccount
  name: istio-egressgateway-service-account
  namespace: istio-system

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: istio-ingressgateway-istio-system
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-ingressgateway-istio-system
subjects:
- kind: ServiceAccount
  name: istio-ingressgateway-service-account
  namespace: istio-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: kiali
    chart: kiali-1.0.6
    heritage: Tiller
    release: istio
  name: istio-kiali-admin-role-binding-istio-system
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kiali
subjects:
- kind: ServiceAccount
  name: kiali-service-account
  namespace: istio-system

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: mixer
    chart: mixer-1.0.6
    heritage: Tiller
    release: istio
  name: istio-mixer-admin-role-binding-istio-system
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-mixer-istio-system
subjects:
- kind: ServiceAccount
  name: istio-mixer-service-account
  namespace: istio-system

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: istio-pilot
    chart: pilot-1.0.6
    heritage: Tiller
    release: istio
  name: istio-pilot-istio-system
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-pilot-istio-system
subjects:
- kind: ServiceAccount
  name: istio-pilot-service-account
  namespace: istio-system

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: security
    chart: security-1.0.6
    heritage: Tiller
    release: istio
  name: istio-citadel-istio-system
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-citadel-istio-system
subjects:
- kind: ServiceAccount
  name: istio-citadel-service-account
  namespace: istio-system

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: istio-sidecar-injector
    chart: sidecarInjectorWebhook-1.0.6
    heritage: Tiller
    release: istio
  name: istio-sidecar-injector-admin-role-binding-istio-system
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-sidecar-injector-istio-system
subjects:
- kind: ServiceAccount
  name: istio-sidecar-injector-service-account
  namespace: istio-system

---
apiVersion: v1
kind: Service
metadata:
  labels:
    istio: galley
  name: istio-galley
  namespace: istio-system
spec:
  ports:
  - name: https-validation
    port: 443
  - name: http-monitoring
    port: 9093
  selector:
    istio: galley

---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app: istio-egressgateway
    chart: gateways-1.0.6
    heritage: Tiller
    istio: egressgateway
    release: istio
  name: istio-egressgateway
  namespace: istio-system
spec:
  ports:
  - name: http2
    port: 80
  - name: https
    port: 443
  selector:
    app: istio-egressgateway
    istio: egressgateway
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app: istio-ingressgateway
    chart: gateways-1.0.6
    heritage: Tiller
    istio: ingressgateway
    release: istio
  name: istio-ingressgateway
  namespace: istio-system
spec:
  ports:
  - name: http2
    nodePort: 31380
    port: 80
    targetPort: 80
  - name: https
    nodePort: 31390
    port: 443
  - name: tcp
    nodePort: 31400
    port: 31400
  - name: tcp-pilot-grpc-tls
    port: 15011
    targetPort: 15011
  - name: tcp-citadel-grpc-tls
    port: 8060
    targetPort: 8060
  - name: tcp-dns-tls
    port: 853
    targetPort: 853
  - name: http2-prometheus
    port: 15030
    targetPort: 15030
  - name: http2-grafana
    port: 15031
    targetPort: 15031
  selector:
    app: istio-ingressgateway
    istio: ingressgateway
  type: LoadBalancer

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kiali
  name: kiali
  namespace: istio-system
spec:
  ports:
  - name: http-kiali
    port: 20001
    protocol: TCP
  selector:
    app: kiali

---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: mixer-1.0.6
    istio: mixer
    release: istio
  name: istio-policy
  namespace: istio-system
spec:
  ports:
  - name: grpc-mixer
    port: 9091
  - name: grpc-mixer-mtls
    port: 15004
  - name: http-monitoring
    port: 9093
  selector:
    istio: mixer
    istio-mixer-type: policy

---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: mixer-1.0.6
    istio: mixer
    release: istio
  name: istio-telemetry
  namespace: istio-system
spec:
  ports:
  - name: grpc-mixer
    port: 9091
  - name: grpc-mixer-mtls
    port: 15004
  - name: http-monitoring
    port: 9093
  - name: prometheus
    port: 42422
  selector:
    istio: mixer
    istio-mixer-type: telemetry

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: istio-pilot
    chart: pilot-1.0.6
    heritage: Tiller
    release: istio
  name: istio-pilot
  namespace: istio-system
spec:
  ports:
  - name: grpc-xds
    port: 15010
  - name: https-xds
    port: 15011
  - name: http-legacy-discovery
    port: 8080
  - name: http-monitoring
    port: 9093
  selector:
    istio: pilot

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: istio-citadel
  name: istio-citadel
  namespace: istio-system
spec:
  ports:
  - name: grpc-citadel
    port: 8060
    protocol: TCP
    targetPort: 8060
  - name: http-monitoring
    port: 9093
  selector:
    istio: citadel

---
apiVersion: v1
kind: Service
metadata:
  labels:
    istio: sidecar-injector
  name: istio-sidecar-injector
  namespace: istio-system
spec:
  ports:
  - port: 443
  selector:
    istio: sidecar-injector

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: galley
    chart: galley-1.0.6
    heritage: Tiller
    istio: galley
    release: istio
  name: istio-galley
  namespace: istio-system
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        sidecar.istio.io/inject: "false"
      labels:
        istio: galley
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x
            weight: 2
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
      containers:
      - command:
        - /usr/local/bin/galley
        - validator
        - --deployment-namespace=istio-system
        - --caCertFile=/etc/istio/certs/root-cert.pem
        - --tlsCertFile=/etc/istio/certs/cert-chain.pem
        - --tlsKeyFile=/etc/istio/certs/key.pem
        - --healthCheckInterval=1s
        - --healthCheckFile=/health
        - --webhook-config-file
        - /etc/istio/config/validatingwebhookconfiguration.yaml
        image: docker.io/istio/galley:1.0.6
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /usr/local/bin/galley
            - probe
            - --probe-path=/health
            - --interval=10s
          initialDelaySeconds: 5
          periodSeconds: 5
        name: validator
        ports:
        - containerPort: 443
        - containerPort: 9093
        readinessProbe:
          exec:
            command:
            - /usr/local/bin/galley
            - probe
            - --probe-path=/health
            - --interval=10s
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /etc/istio/certs
          name: certs
          readOnly: true
        - mountPath: /etc/istio/config
          name: config
          readOnly: true
      serviceAccountName: istio-galley-service-account
      volumes:
      - name: certs
        secret:
          secretName: istio.istio-galley-service-account
      - configMap:
          name: istio-galley-configuration
        name: config

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: istio-egressgateway
    chart: gateways-1.0.6
    heritage: Tiller
    istio: egressgateway
    release: istio
  name: istio-egressgateway
  namespace: istio-system
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        sidecar.istio.io/inject: "false"
      labels:
        app: istio-egressgateway
        istio: egressgateway
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x
            weight: 2
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
      containers:
      - args:
        - proxy
        - router
        - -v
        - "2"
        - --discoveryRefreshDelay
        - 1s
        - --drainDuration
        - 45s
        - --parentShutdownDuration
        - 1m0s
        - --connectTimeout
        - 10s
        - --serviceCluster
        - istio-egressgateway
        - --zipkinAddress
        - zipkin:9411
        - --proxyAdminPort
        - "15000"
        - --controlPlaneAuthPolicy
        - NONE
        - --discoveryAddress
        - istio-pilot:8080
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: ISTIO_META_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: docker.io/istio/proxyv2:1.0.6
        imagePullPolicy: IfNotPresent
        name: istio-proxy
        ports:
        - containerPort: 80
        - containerPort: 443
        - containerPort: 15090
          name: http-envoy-prom
          protocol: TCP
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /etc/certs
          name: istio-certs
          readOnly: true
        - mountPath: /etc/istio/egressgateway-certs
          name: egressgateway-certs
          readOnly: true
        - mountPath: /etc/istio/egressgateway-ca-certs
          name: egressgateway-ca-certs
          readOnly: true
      serviceAccountName: istio-egressgateway-service-account
      volumes:
      - name: istio-certs
        secret:
          optional: true
          secretName: istio.istio-egressgateway-service-account
      - name: egressgateway-certs
        secret:
          optional: true
          secretName: istio-egressgateway-certs
      - name: egressgateway-ca-certs
        secret:
          optional: true
          secretName: istio-egressgateway-ca-certs

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: istio-ingressgateway
    chart: gateways-1.0.6
    heritage: Tiller
    istio: ingressgateway
    release: istio
  name: istio-ingressgateway
  namespace: istio-system
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        sidecar.istio.io/inject: "false"
      labels:
        app: istio-ingressgateway
        istio: ingressgateway
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x
            weight: 2
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
      containers:
      - args:
        - proxy
        - router
        - -v
        - "2"
        - --discoveryRefreshDelay
        - 1s
        - --drainDuration
        - 45s
        - --parentShutdownDuration
        - 1m0s
        - --connectTimeout
        - 10s
        - --serviceCluster
        - istio-ingressgateway
        - --zipkinAddress
        - zipkin:9411
        - --proxyAdminPort
        - "15000"
        - --controlPlaneAuthPolicy
        - NONE
        - --discoveryAddress
        - istio-pilot:8080
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: ISTIO_META_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: docker.io/istio/proxyv2:1.0.6
        imagePullPolicy: IfNotPresent
        name: istio-proxy
        ports:
        - containerPort: 80
        - containerPort: 443
        - containerPort: 31400
        - containerPort: 15011
        - containerPort: 8060
        - containerPort: 853
        - containerPort: 15030
        - containerPort: 15031
        - containerPort: 15090
          name: http-envoy-prom
          protocol: TCP
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /etc/certs
          name: istio-certs
          readOnly: true
        - mountPath: /etc/istio/ingressgateway-certs
          name: ingressgateway-certs
          readOnly: true
        - mountPath: /etc/istio/ingressgateway-ca-certs
          name: ingressgateway-ca-certs
          readOnly: true
      serviceAccountName: istio-ingressgateway-service-account
      volumes:
      - name: istio-certs
        secret:
          optional: true
          secretName: istio.istio-ingressgateway-service-account
      - name: ingressgateway-certs
        secret:
          optional: true
          secretName: istio-ingressgateway-certs
      - name: ingressgateway-ca-certs
        secret:
          optional: true
          secretName: istio-ingressgateway-ca-certs

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: kiali
    chart: kiali-1.0.6
    heritage: Tiller
    release: istio
  name: kiali
  namespace: istio-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kiali
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        sidecar.istio.io/inject: "false"
      labels:
        app: kiali
      name: kiali
    spec:
      containers:
      - command:
        - /opt/kiali/kiali
        - -config
        - /kiali-configuration/config.yaml
        - -v
        - "4"
        env:
        - name: ACTIVE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SERVER_CREDENTIALS_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: kiali
        - name: SERVER_CREDENTIALS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: passphrase
              name: kiali
        - name: PROMETHEUS_SERVICE_URL
          value: http://prometheus:9090
        image: docker.io/kiali/kiali:v0.12
        name: kiali
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /kiali-configuration
          name: kiali-configuration
      serviceAccountName: kiali-service-account
      volumes:
      - configMap:
          name: kiali
        name: kiali-configuration

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    chart: mixer-1.0.6
    istio: mixer
    release: istio
  name: istio-policy
  namespace: istio-system
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        sidecar.istio.io/inject: "false"
      labels:
        app: policy
        istio: mixer
        istio-mixer-type: policy
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x
            weight: 2
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
      containers:
      - args:
        - --address
        - unix:///sock/mixer.socket
        - --configStoreURL=k8s://
        - --configDefaultNamespace=istio-system
        - --trace_zipkin_url=http://zipkin:9411/api/v1/spans
        - --numCheckCacheEntries=0
        env:
        - name: GODEBUG
          value: gctrace=2
        image: docker.io/istio/mixer:1.0.6
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /version
            port: 9093
          initialDelaySeconds: 5
          periodSeconds: 5
        name: mixer
        ports:
        - containerPort: 9093
        - containerPort: 42422
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /sock
          name: uds-socket
      - args:
        - proxy
        - --serviceCluster
        - istio-policy
        - --templateFile
        - /etc/istio/proxy/envoy_policy.yaml.tmpl
        - --controlPlaneAuthPolicy
        - NONE
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        image: docker.io/istio/proxyv2:1.0.6
        imagePullPolicy: IfNotPresent
        name: istio-proxy
        ports:
        - containerPort: 15090
          name: http-envoy-prom
          protocol: TCP
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /etc/certs
          name: istio-certs
          readOnly: true
        - mountPath: /sock
          name: uds-socket
      serviceAccountName: istio-mixer-service-account
      volumes:
      - name: istio-certs
        secret:
          optional: true
          secretName: istio.istio-mixer-service-account
      - emptyDir: {}
        name: uds-socket

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    chart: mixer-1.0.6
    istio: mixer
    release: istio
  name: istio-telemetry
  namespace: istio-system
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        sidecar.istio.io/inject: "false"
      labels:
        app: telemetry
        istio: mixer
        istio-mixer-type: telemetry
    spec:
      containers:
      - args:
        - --address
        - unix:///sock/mixer.socket
        - --configStoreURL=k8s://
        - --configDefaultNamespace=istio-system
        - --trace_zipkin_url=http://zipkin:9411/api/v1/spans
        env:
        - name: GODEBUG
          value: gctrace=2
        image: docker.io/istio/mixer:1.0.6
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /version
            port: 9093
          initialDelaySeconds: 5
          periodSeconds: 5
        name: mixer
        ports:
        - containerPort: 9093
        - containerPort: 42422
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /sock
          name: uds-socket
      - args:
        - proxy
        - --serviceCluster
        - istio-telemetry
        - --templateFile
        - /etc/istio/proxy/envoy_telemetry.yaml.tmpl
        - --controlPlaneAuthPolicy
        - NONE
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        image: docker.io/istio/proxyv2:1.0.6
        imagePullPolicy: IfNotPresent
        name: istio-proxy
        ports:
        - containerPort: 15090
          name: http-envoy-prom
          protocol: TCP
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /etc/certs
          name: istio-certs
          readOnly: true
        - mountPath: /sock
          name: uds-socket
      serviceAccountName: istio-mixer-service-account
      volumes:
      - name: istio-certs
        secret:
          optional: true
          secretName: istio.istio-mixer-service-account
      - emptyDir: {}
        name: uds-socket

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    checksum/config-volume: f8da08b6b8c170dde721efd680270b2901e750d4aa186ebb6c22bef5b78a43f9
  labels:
    app: istio-pilot
    chart: pilot-1.0.6
    heritage: Tiller
    istio: pilot
    release: istio
  name: istio-pilot
  namespace: istio-system
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        sidecar.istio.io/inject: "false"
      labels:
        app: pilot
        istio: pilot
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x
            weight: 2
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
      containers:
      - args:
        - discovery
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: PILOT_CACHE_SQUASH
          value: "5"
        - name: GODEBUG
          value: gctrace=2
        - name: PILOT_PUSH_THROTTLE_COUNT
          value: "100"
        - name: PILOT_TRACE_SAMPLING
          value: "1"
        image: docker.io/istio/pilot:1.0.6
        imagePullPolicy: IfNotPresent
        name: discovery
        ports:
        - containerPort: 8080
        - containerPort: 15010
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 500m
            memory: 2048Mi
        volumeMounts:
        - mountPath: /etc/istio/config
          name: config-volume
        - mountPath: /etc/certs
          name: istio-certs
          readOnly: true
      - args:
        - proxy
        - --serviceCluster
        - istio-pilot
        - --templateFile
        - /etc/istio/proxy/envoy_pilot.yaml.tmpl
        - --controlPlaneAuthPolicy
        - NONE
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        image: docker.io/istio/proxyv2:1.0.6
        imagePullPolicy: IfNotPresent
        name: istio-proxy
        ports:
        - containerPort: 15003
        - containerPort: 15005
        - containerPort: 15007
        - containerPort: 15011
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /etc/certs
          name: istio-certs
          readOnly: true
      serviceAccountName: istio-pilot-service-account
      volumes:
      - configMap:
          name: istio
        name: config-volume
      - name: istio-certs
        secret:
          optional: true
          secretName: istio.istio-pilot-service-account

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: security
    chart: security-1.0.6
    heritage: Tiller
    istio: citadel
    release: istio
  name: istio-citadel
  namespace: istio-system
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        sidecar.istio.io/inject: "false"
      labels:
        istio: citadel
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x
            weight: 2
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
      containers:
      - args:
        - --append-dns-names=true
        - --grpc-port=8060
        - --grpc-hostname=citadel
        - --citadel-storage-namespace=istio-system
        - --custom-dns-names=istio-pilot-service-account.istio-system:istio-pilot.istio-system,istio-ingressgateway-service-account.istio-system:istio-ingressgateway.istio-system
        - --self-signed-ca=true
        image: docker.io/istio/citadel:1.0.6
        imagePullPolicy: IfNotPresent
        name: citadel
        resources:
          requests:
            cpu: 10m
      serviceAccountName: istio-citadel-service-account

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: sidecarInjectorWebhook
    chart: sidecarInjectorWebhook-1.0.6
    heritage: Tiller
    istio: sidecar-injector
    release: istio
  name: istio-sidecar-injector
  namespace: istio-system
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        sidecar.istio.io/inject: "false"
      labels:
        istio: sidecar-injector
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
            weight: 2
          - preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x
            weight: 2
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
      containers:
      - args:
        - --caCertFile=/etc/istio/certs/root-cert.pem
        - --tlsCertFile=/etc/istio/certs/cert-chain.pem
        - --tlsKeyFile=/etc/istio/certs/key.pem
        - --injectConfig=/etc/istio/inject/config
        - --meshConfig=/etc/istio/config/mesh
        - --healthCheckInterval=2s
        - --healthCheckFile=/health
        image: docker.io/istio/sidecar_injector:1.0.6
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /usr/local/bin/sidecar-injector
            - probe
            - --probe-path=/health
            - --interval=4s
          initialDelaySeconds: 4
          periodSeconds: 4
        name: sidecar-injector-webhook
        readinessProbe:
          exec:
            command:
            - /usr/local/bin/sidecar-injector
            - probe
            - --probe-path=/health
            - --interval=4s
          initialDelaySeconds: 4
          periodSeconds: 4
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /etc/istio/config
          name: config-volume
          readOnly: true
        - mountPath: /etc/istio/certs
          name: certs
          readOnly: true
        - mountPath: /etc/istio/inject
          name: inject-config
          readOnly: true
      serviceAccountName: istio-sidecar-injector-service-account
      volumes:
      - configMap:
          name: istio
        name: config-volume
      - name: certs
        secret:
          secretName: istio.istio-sidecar-injector-service-account
      - configMap:
          items:
          - key: config
            path: config
          name: istio-sidecar-injector
        name: inject-config

---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: istio-autogenerated-k8s-ingress
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - '*'
    port:
      name: http
      number: 80
      protocol: HTTP2

---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: istio-egressgateway
  namespace: istio-system
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      targetAverageUtilization: 80
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: istio-egressgateway

---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: istio-ingressgateway
  namespace: istio-system
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      targetAverageUtilization: 80
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: istio-ingressgateway

---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: istio-policy
  namespace: istio-system
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      targetAverageUtilization: 80
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: istio-policy

---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: istio-telemetry
  namespace: istio-system
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      targetAverageUtilization: 80
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: istio-telemetry

---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: istio-pilot
  namespace: istio-system
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      targetAverageUtilization: 80
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: istio-pilot

---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  labels:
    app: istio-sidecar-injector
    chart: sidecarInjectorWebhook-1.0.6
    heritage: Tiller
    release: istio
  name: istio-sidecar-injector
  namespace: istio-system
webhooks:
- clientConfig:
    caBundle: ""
    service:
      name: istio-sidecar-injector
      namespace: istio-system
      path: /inject
  failurePolicy: Fail
  name: sidecar-injector.istio.io
  namespaceSelector:
    matchLabels:
      istio-injection: enabled
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    resources:
    - pods

---
apiVersion: config.istio.io/v1alpha2
kind: attributemanifest
metadata:
  name: istioproxy
  namespace: istio-system
spec:
  attributes:
    api.operation:
      valueType: STRING
    api.protocol:
      valueType: STRING
    api.service:
      valueType: STRING
    api.version:
      valueType: STRING
    connection.duration:
      valueType: DURATION
    connection.event:
      valueType: STRING
    connection.id:
      valueType: STRING
    connection.mtls:
      valueType: BOOL
    connection.received.bytes:
      valueType: INT64
    connection.received.bytes_total:
      valueType: INT64
    connection.requested_server_name:
      valueType: STRING
    connection.sent.bytes:
      valueType: INT64
    connection.sent.bytes_total:
      valueType: INT64
    context.protocol:
      valueType: STRING
    context.reporter.kind:
      valueType: STRING
    context.reporter.local:
      valueType: BOOL
    context.reporter.uid:
      valueType: STRING
    context.time:
      valueType: TIMESTAMP
    context.timestamp:
      valueType: TIMESTAMP
    destination.port:
      valueType: INT64
    destination.principal:
      valueType: STRING
    destination.uid:
      valueType: STRING
    origin.ip:
      valueType: IP_ADDRESS
    origin.uid:
      valueType: STRING
    origin.user:
      valueType: STRING
    request.api_key:
      valueType: STRING
    request.auth.audiences:
      valueType: STRING
    request.auth.claims:
      valueType: STRING_MAP
    request.auth.presenter:
      valueType: STRING
    request.auth.principal:
      valueType: STRING
    request.auth.raw_claims:
      valueType: STRING
    request.headers:
      valueType: STRING_MAP
    request.host:
      valueType: STRING
    request.id:
      valueType: STRING
    request.method:
      valueType: STRING
    request.path:
      valueType: STRING
    request.reason:
      valueType: STRING
    request.referer:
      valueType: STRING
    request.scheme:
      valueType: STRING
    request.size:
      valueType: INT64
    request.time:
      valueType: TIMESTAMP
    request.total_size:
      valueType: INT64
    request.useragent:
      valueType: STRING
    response.code:
      valueType: INT64
    response.duration:
      valueType: DURATION
    response.headers:
      valueType: STRING_MAP
    response.size:
      valueType: INT64
    response.time:
      valueType: TIMESTAMP
    response.total_size:
      valueType: INT64
    source.principal:
      valueType: STRING
    source.uid:
      valueType: STRING
    source.user:
      valueType: STRING

---
apiVersion: config.istio.io/v1alpha2
kind: attributemanifest
metadata:
  name: kubernetes
  namespace: istio-system
spec:
  attributes:
    destination.container.name:
      valueType: STRING
    destination.ip:
      valueType: IP_ADDRESS
    destination.labels:
      valueType: STRING_MAP
    destination.metadata:
      valueType: STRING_MAP
    destination.name:
      valueType: STRING
    destination.namespace:
      valueType: STRING
    destination.owner:
      valueType: STRING
    destination.service:
      valueType: STRING
    destination.service.host:
      valueType: STRING
    destination.service.name:
      valueType: STRING
    destination.service.namespace:
      valueType: STRING
    destination.service.uid:
      valueType: STRING
    destination.serviceAccount:
      valueType: STRING
    destination.workload.name:
      valueType: STRING
    destination.workload.namespace:
      valueType: STRING
    destination.workload.uid:
      valueType: STRING
    source.ip:
      valueType: IP_ADDRESS
    source.labels:
      valueType: STRING_MAP
    source.metadata:
      valueType: STRING_MAP
    source.name:
      valueType: STRING
    source.namespace:
      valueType: STRING
    source.owner:
      valueType: STRING
    source.service:
      valueType: STRING
    source.serviceAccount:
      valueType: STRING
    source.services:
      valueType: STRING
    source.workload.name:
      valueType: STRING
    source.workload.namespace:
      valueType: STRING
    source.workload.uid:
      valueType: STRING

---
apiVersion: config.istio.io/v1alpha2
kind: stdio
metadata:
  name: handler
  namespace: istio-system
spec:
  outputAsJson: true

---
apiVersion: config.istio.io/v1alpha2
kind: logentry
metadata:
  name: accesslog
  namespace: istio-system
spec:
  monitored_resource_type: '"global"'
  severity: '"Info"'
  timestamp: request.time
  variables:
    apiClaims: request.auth.raw_claims | ""
    apiKey: request.api_key | request.headers["x-api-key"] | ""
    clientTraceId: request.headers["x-client-trace-id"] | ""
    connection_security_policy: conditional((context.reporter.kind | "inbound") ==
      "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    destinationApp: destination.labels["app"] | ""
    destinationIp: destination.ip | ip("0.0.0.0")
    destinationName: destination.name | ""
    destinationNamespace: destination.namespace | ""
    destinationOwner: destination.owner | ""
    destinationPrincipal: destination.principal | ""
    destinationServiceHost: destination.service.host | ""
    destinationWorkload: destination.workload.name | ""
    httpAuthority: request.headers[":authority"] | request.host | ""
    latency: response.duration | "0ms"
    method: request.method | ""
    protocol: request.scheme | context.protocol | "http"
    receivedBytes: request.total_size | 0
    referer: request.referer | ""
    reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source",
      "destination")
    requestId: request.headers["x-request-id"] | ""
    requestSize: request.size | 0
    requestedServerName: connection.requested_server_name | ""
    responseCode: response.code | 0
    responseSize: response.size | 0
    responseTimestamp: response.time
    sentBytes: response.total_size | 0
    sourceApp: source.labels["app"] | ""
    sourceIp: source.ip | ip("0.0.0.0")
    sourceName: source.name | ""
    sourceNamespace: source.namespace | ""
    sourceOwner: source.owner | ""
    sourcePrincipal: source.principal | ""
    sourceWorkload: source.workload.name | ""
    url: request.path | ""
    userAgent: request.useragent | ""
    xForwardedFor: request.headers["x-forwarded-for"] | "0.0.0.0"

---
apiVersion: config.istio.io/v1alpha2
kind: logentry
metadata:
  name: tcpaccesslog
  namespace: istio-system
spec:
  monitored_resource_type: '"global"'
  severity: '"Info"'
  timestamp: context.time | timestamp("2017-01-01T00:00:00Z")
  variables:
    connection_security_policy: conditional((context.reporter.kind | "inbound") ==
      "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    connectionDuration: connection.duration | "0ms"
    connectionEvent: connection.event | ""
    destinationApp: destination.labels["app"] | ""
    destinationIp: destination.ip | ip("0.0.0.0")
    destinationName: destination.name | ""
    destinationNamespace: destination.namespace | ""
    destinationOwner: destination.owner | ""
    destinationPrincipal: destination.principal | ""
    destinationServiceHost: destination.service.host | ""
    destinationWorkload: destination.workload.name | ""
    protocol: context.protocol | "tcp"
    receivedBytes: connection.received.bytes | 0
    reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source",
      "destination")
    requestedServerName: connection.requested_server_name | ""
    sentBytes: connection.sent.bytes | 0
    sourceApp: source.labels["app"] | ""
    sourceIp: source.ip | ip("0.0.0.0")
    sourceName: source.name | ""
    sourceNamespace: source.namespace | ""
    sourceOwner: source.owner | ""
    sourcePrincipal: source.principal | ""
    sourceWorkload: source.workload.name | ""
    totalReceivedBytes: connection.received.bytes_total | 0
    totalSentBytes: connection.sent.bytes_total | 0

---
apiVersion: config.istio.io/v1alpha2
kind: rule
metadata:
  name: stdio
  namespace: istio-system
spec:
  actions:
  - handler: handler.stdio
    instances:
    - accesslog.logentry
  match: context.protocol == "http" || context.protocol == "grpc"

---
apiVersion: config.istio.io/v1alpha2
kind: rule
metadata:
  name: stdiotcp
  namespace: istio-system
spec:
  actions:
  - handler: handler.stdio
    instances:
    - tcpaccesslog.logentry
  match: context.protocol == "tcp"

---
apiVersion: config.istio.io/v1alpha2
kind: metric
metadata:
  name: requestcount
  namespace: istio-system
spec:
  dimensions:
    connection_security_policy: conditional((context.reporter.kind | "inbound") ==
      "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    destination_app: destination.labels["app"] | "unknown"
    destination_principal: destination.principal | "unknown"
    destination_service: destination.service.host | "unknown"
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_version: destination.labels["version"] | "unknown"
    destination_workload: destination.workload.name | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source",
      "destination")
    request_protocol: api.protocol | context.protocol | "unknown"
    response_code: response.code | 200
    source_app: source.labels["app"] | "unknown"
    source_principal: source.principal | "unknown"
    source_version: source.labels["version"] | "unknown"
    source_workload: source.workload.name | "unknown"
    source_workload_namespace: source.workload.namespace | "unknown"
  monitored_resource_type: '"UNSPECIFIED"'
  value: "1"

---
apiVersion: config.istio.io/v1alpha2
kind: metric
metadata:
  name: requestduration
  namespace: istio-system
spec:
  dimensions:
    connection_security_policy: conditional((context.reporter.kind | "inbound") ==
      "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    destination_app: destination.labels["app"] | "unknown"
    destination_principal: destination.principal | "unknown"
    destination_service: destination.service.host | "unknown"
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_version: destination.labels["version"] | "unknown"
    destination_workload: destination.workload.name | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source",
      "destination")
    request_protocol: api.protocol | context.protocol | "unknown"
    response_code: response.code | 200
    source_app: source.labels["app"] | "unknown"
    source_principal: source.principal | "unknown"
    source_version: source.labels["version"] | "unknown"
    source_workload: source.workload.name | "unknown"
    source_workload_namespace: source.workload.namespace | "unknown"
  monitored_resource_type: '"UNSPECIFIED"'
  value: response.duration | "0ms"

---
apiVersion: config.istio.io/v1alpha2
kind: metric
metadata:
  name: requestsize
  namespace: istio-system
spec:
  dimensions:
    connection_security_policy: conditional((context.reporter.kind | "inbound") ==
      "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    destination_app: destination.labels["app"] | "unknown"
    destination_principal: destination.principal | "unknown"
    destination_service: destination.service.host | "unknown"
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_version: destination.labels["version"] | "unknown"
    destination_workload: destination.workload.name | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source",
      "destination")
    request_protocol: api.protocol | context.protocol | "unknown"
    response_code: response.code | 200
    source_app: source.labels["app"] | "unknown"
    source_principal: source.principal | "unknown"
    source_version: source.labels["version"] | "unknown"
    source_workload: source.workload.name | "unknown"
    source_workload_namespace: source.workload.namespace | "unknown"
  monitored_resource_type: '"UNSPECIFIED"'
  value: request.size | 0

---
apiVersion: config.istio.io/v1alpha2
kind: metric
metadata:
  name: responsesize
  namespace: istio-system
spec:
  dimensions:
    connection_security_policy: conditional((context.reporter.kind | "inbound") ==
      "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    destination_app: destination.labels["app"] | "unknown"
    destination_principal: destination.principal | "unknown"
    destination_service: destination.service.host | "unknown"
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_version: destination.labels["version"] | "unknown"
    destination_workload: destination.workload.name | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source",
      "destination")
    request_protocol: api.protocol | context.protocol | "unknown"
    response_code: response.code | 200
    source_app: source.labels["app"] | "unknown"
    source_principal: source.principal | "unknown"
    source_version: source.labels["version"] | "unknown"
    source_workload: source.workload.name | "unknown"
    source_workload_namespace: source.workload.namespace | "unknown"
  monitored_resource_type: '"UNSPECIFIED"'
  value: response.size | 0

---
apiVersion: config.istio.io/v1alpha2
kind: metric
metadata:
  name: tcpbytesent
  namespace: istio-system
spec:
  dimensions:
    connection_security_policy: conditional((context.reporter.kind | "inbound") ==
      "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    destination_app: destination.labels["app"] | "unknown"
    destination_principal: destination.principal | "unknown"
    destination_service: destination.service.name | "unknown"
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_version: destination.labels["version"] | "unknown"
    destination_workload: destination.workload.name | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source",
      "destination")
    source_app: source.labels["app"] | "unknown"
    source_principal: source.principal | "unknown"
    source_version: source.labels["version"] | "unknown"
    source_workload: source.workload.name | "unknown"
    source_workload_namespace: source.workload.namespace | "unknown"
  monitored_resource_type: '"UNSPECIFIED"'
  value: connection.sent.bytes | 0

---
apiVersion: config.istio.io/v1alpha2
kind: metric
metadata:
  name: tcpbytereceived
  namespace: istio-system
spec:
  dimensions:
    connection_security_policy: conditional((context.reporter.kind | "inbound") ==
      "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    destination_app: destination.labels["app"] | "unknown"
    destination_principal: destination.principal | "unknown"
    destination_service: destination.service.name | "unknown"
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_version: destination.labels["version"] | "unknown"
    destination_workload: destination.workload.name | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source",
      "destination")
    source_app: source.labels["app"] | "unknown"
    source_principal: source.principal | "unknown"
    source_version: source.labels["version"] | "unknown"
    source_workload: source.workload.name | "unknown"
    source_workload_namespace: source.workload.namespace | "unknown"
  monitored_resource_type: '"UNSPECIFIED"'
  value: connection.received.bytes | 0

---
apiVersion: config.istio.io/v1alpha2
kind: prometheus
metadata:
  name: handler
  namespace: istio-system
spec:
  metrics:
  - instance_name: requestcount.metric.istio-system
    kind: COUNTER
    label_names:
    - reporter
    - source_app
    - source_principal
    - source_workload
    - source_workload_namespace
    - source_version
    - destination_app
    - destination_principal
    - destination_workload
    - destination_workload_namespace
    - destination_version
    - destination_service
    - destination_service_name
    - destination_service_namespace
    - request_protocol
    - response_code
    - connection_security_policy
    name: requests_total
  - buckets:
      explicit_buckets:
        bounds:
        - 0.005
        - 0.01
        - 0.025
        - 0.05
        - 0.1
        - 0.25
        - 0.5
        - 1
        - 2.5
        - 5
        - 10
    instance_name: requestduration.metric.istio-system
    kind: DISTRIBUTION
    label_names:
    - reporter
    - source_app
    - source_principal
    - source_workload
    - source_workload_namespace
    - source_version
    - destination_app
    - destination_principal
    - destination_workload
    - destination_workload_namespace
    - destination_version
    - destination_service
    - destination_service_name
    - destination_service_namespace
    - request_protocol
    - response_code
    - connection_security_policy
    name: request_duration_seconds
  - buckets:
      exponentialBuckets:
        growthFactor: 10
        numFiniteBuckets: 8
        scale: 1
    instance_name: requestsize.metric.istio-system
    kind: DISTRIBUTION
    label_names:
    - reporter
    - source_app
    - source_principal
    - source_workload
    - source_workload_namespace
    - source_version
    - destination_app
    - destination_principal
    - destination_workload
    - destination_workload_namespace
    - destination_version
    - destination_service
    - destination_service_name
    - destination_service_namespace
    - request_protocol
    - response_code
    - connection_security_policy
    name: request_bytes
  - buckets:
      exponentialBuckets:
        growthFactor: 10
        numFiniteBuckets: 8
        scale: 1
    instance_name: responsesize.metric.istio-system
    kind: DISTRIBUTION
    label_names:
    - reporter
    - source_app
    - source_principal
    - source_workload
    - source_workload_namespace
    - source_version
    - destination_app
    - destination_principal
    - destination_workload
    - destination_workload_namespace
    - destination_version
    - destination_service
    - destination_service_name
    - destination_service_namespace
    - request_protocol
    - response_code
    - connection_security_policy
    name: response_bytes
  - instance_name: tcpbytesent.metric.istio-system
    kind: COUNTER
    label_names:
    - reporter
    - source_app
    - source_principal
    - source_workload
    - source_workload_namespace
    - source_version
    - destination_app
    - destination_principal
    - destination_workload
    - destination_workload_namespace
    - destination_version
    - destination_service
    - destination_service_name
    - destination_service_namespace
    - connection_security_policy
    name: tcp_sent_bytes_total
  - instance_name: tcpbytereceived.metric.istio-system
    kind: COUNTER
    label_names:
    - reporter
    - source_app
    - source_principal
    - source_workload
    - source_workload_namespace
    - source_version
    - destination_app
    - destination_principal
    - destination_workload
    - destination_workload_namespace
    - destination_version
    - destination_service
    - destination_service_name
    - destination_service_namespace
    - connection_security_policy
    name: tcp_received_bytes_total

---
apiVersion: config.istio.io/v1alpha2
kind: rule
metadata:
  name: promhttp
  namespace: istio-system
spec:
  actions:
  - handler: handler.prometheus
    instances:
    - requestcount.metric
    - requestduration.metric
    - requestsize.metric
    - responsesize.metric
  match: context.protocol == "http" || context.protocol == "grpc"

---
apiVersion: config.istio.io/v1alpha2
kind: rule
metadata:
  name: promtcp
  namespace: istio-system
spec:
  actions:
  - handler: handler.prometheus
    instances:
    - tcpbytesent.metric
    - tcpbytereceived.metric
  match: context.protocol == "tcp"

---
apiVersion: config.istio.io/v1alpha2
kind: kubernetesenv
metadata:
  name: handler
  namespace: istio-system
spec: null

---
apiVersion: config.istio.io/v1alpha2
kind: rule
metadata:
  name: kubeattrgenrulerule
  namespace: istio-system
spec:
  actions:
  - handler: handler.kubernetesenv
    instances:
    - attributes.kubernetes

---
apiVersion: config.istio.io/v1alpha2
kind: rule
metadata:
  name: tcpkubeattrgenrulerule
  namespace: istio-system
spec:
  actions:
  - handler: handler.kubernetesenv
    instances:
    - attributes.kubernetes
  match: context.protocol == "tcp"

---
apiVersion: config.istio.io/v1alpha2
kind: kubernetes
metadata:
  name: attributes
  namespace: istio-system
spec:
  attribute_bindings:
    destination.container.name: $out.destination_container_name | "unknown"
    destination.ip: $out.destination_pod_ip | ip("0.0.0.0")
    destination.labels: $out.destination_labels | emptyStringMap()
    destination.name: $out.destination_pod_name | "unknown"
    destination.namespace: $out.destination_namespace | "default"
    destination.owner: $out.destination_owner | "unknown"
    destination.serviceAccount: $out.destination_service_account_name | "unknown"
    destination.uid: $out.destination_pod_uid | "unknown"
    destination.workload.name: $out.destination_workload_name | "unknown"
    destination.workload.namespace: $out.destination_workload_namespace | "unknown"
    destination.workload.uid: $out.destination_workload_uid | "unknown"
    source.ip: $out.source_pod_ip | ip("0.0.0.0")
    source.labels: $out.source_labels | emptyStringMap()
    source.name: $out.source_pod_name | "unknown"
    source.namespace: $out.source_namespace | "default"
    source.owner: $out.source_owner | "unknown"
    source.serviceAccount: $out.source_service_account_name | "unknown"
    source.uid: $out.source_pod_uid | "unknown"
    source.workload.name: $out.source_workload_name | "unknown"
    source.workload.namespace: $out.source_workload_namespace | "unknown"
    source.workload.uid: $out.source_workload_uid | "unknown"
  destination_port: destination.port | 0
  destination_uid: destination.uid | ""
  source_ip: source.ip | ip("0.0.0.0")
  source_uid: source.uid | ""

---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: istio-policy
  namespace: istio-system
spec:
  host: istio-policy.istio-system.svc.cluster.local
  trafficPolicy:
    connectionPool:
      http:
        http2MaxRequests: 10000
        maxRequestsPerConnection: 10000

---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: istio-telemetry
  namespace: istio-system
spec:
  host: istio-telemetry.istio-system.svc.cluster.local
  trafficPolicy:
    connectionPool:
      http:
        http2MaxRequests: 10000
        maxRequestsPerConnection: 10000

